package com.leetcode.problem;

import java.util.ArrayList;

public class LongestParentheses {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		LongestParentheses demo=new LongestParentheses();
		System.out.println(demo.longestValidParentheses("(()(()()()(()())()(()()))()()())()(((()())((())(()()((()((((())(())()()(())()(()(()(())))))))(()()()))()()))))))(()())))((())())))()(((()(()))())((())))(())(((()()))))())))((()((()()(()))())(()))(())((())()(((()(((()))))()))()()())()()()(()(()(()()()(()(())(())))())()))())(())((())(()((((())((())((())(()()(((()))(()(((())())()(())))(()))))))(()(()(()))())(()()(()(((()()))()(())))(()()(())))))(()(()()())))()()())))))((())(()()(((()(()()))(())))(((()))())())())(((()((()((()())((()))(()()((()(())())(()))()())())))))()(()())))()()))(((()(()))((()((((())((())))((())()()))())()(((()()(((()))))))(((()))()(()(((())(())()()()))))()))()))))()(()))()()()))))()(()))()()(()())))(()))()())(())()())(())()()))(()())))((()())))())))))((()))())()()))))()))(((())(())()))()()((()))(((()))))((()((()))(())(((()))()()()())())())))(()(((())()())(())(((()()((())()))(()()(((())))((()(((()))(((((()(((())())))(())(()()((()(()(())())(((((())((()()))())(()())))()()()(()(((((((())))(()()()()((()(((())())())())))())())())))()((((())(((()()()())()))()()(()(()()))()))(())(()())))))()())()())))()()(())))))))((())()()(((()))()))())))))((()())((()())(((())()())()))(()(()()(((()(())()))()())()()(())()(()))))()))()()))))(())(()()(())((()))(()))((())))))(())))()))(()()(())))())()((())()))((()()(()())()()(()))())(((())()(((()((())()(()()()((()(()())(()())())((((())))())())))(()))(((())((()))))((()()(((())((())()()()))((()())()()())())))))((((()((()())))(())(())()()()(((((())())()()()(())())()((()(()())(((())((((()((()(((()))(()()))())()()(()(()(())))()))())))(()()(()))))))(()()())()()))()(())()("
				));
	}
	
	public int longestValidParentheses(String s) {
        char[] charArray=s.toCharArray();
        ArrayList<Integer> signals=new ArrayList<Integer>();
        for(int i=0;i<charArray.length;i++){
        	if(charArray[i]=='('){
        		signals.add(1);
        	}
        	else if(charArray[i]==')'){
        		signals.add(-1);
        	}
        }
        if(!signals.isEmpty()){
        	return searchTheLongest(signals);
        }
		return 0;
    }
	
	public int searchTheLongest(ArrayList<Integer> array){
		int longest=0,temp=0;
		for(int i=0;i<array.size();i++){
			if(array.get(i)==1){
				temp=findTheCorrespondingOne(array,i);
				if((temp-i)>longest){
					longest=(temp-i)+1;
				}
				if(temp>i){
					i=temp;
				}
			}
		}
		return longest+1;
	}
	
	public int findTheCorrespondingOne(ArrayList<Integer> array,int start){
		int sum=0;
		for(int j=array.size()-1;j>start+1;j--){
			if(array.get(j)==-1){
				sum=0;
				for(int m=start+1;m<j;m++){
					sum+=array.get(m);
				}
				if(sum==0){
					return j;
				}
			}
		}
		return 0;
	}
}
